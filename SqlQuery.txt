INSERT INTO Users ( 
    username, 
    password, 
    role, 
    department_id, 
    batch_id, 
    profile_pic, 
    email, 
    phone_number, 
    roll_number, 
    Name, 
    LastName, 
    Gender 
) 
VALUES 
('TalhaPrincipal', 'password123', 'Principal', NULL, NULL, NULL, 'principal@gmail.com', '+1234567890', NULL, 'Talha', 'Principal', 'Male'),
('TalhaHod', 'Aspnet12!', 'Hod', 4, NULL, NULL, 'hod@gmail.com', '+1234567890', NULL, 'Talha', 'Hod', 'Male'),
('TalhaAdmin', 'Aspnet12!', 'Admin', NULL, NULL, NULL, 'Admin@gmail.com', '+1234567890', NULL, 'Talha', 'Admin', 'Male'),
('TalhaTeacher', 'Aspnet12!', 'Teachers', 4, NULL, NULL, 'teacher@gmail.com', '+1234567890', NULL, 'Talha', 'Teacher', 'Male'),
('TalhaStudent', 'Aspnet12!', 'Students', 4, 1, NULL, 'student@gmail.com', '+1234567890', '21-3846', 'Talha', 'Student', 'Male');





-- Users Table: Stores general information for all users (students, teachers, HODs, admins, etc.)
CREATE TABLE Users (
    user_id INT IDENTITY(1,1) PRIMARY KEY,
    username NVARCHAR(255) UNIQUE NOT NULL, -- Unique for every user
    password NVARCHAR(255) NOT NULL,
    role NVARCHAR(50) NOT NULL,  -- 5 defined roles
    department_id INT NULL,
    batch_id INT NULL,
    profile_pic NVARCHAR(255) NULL,
    email NVARCHAR(255) UNIQUE NOT NULL, -- Unique for every user
    phone_number NVARCHAR(15) NULL,
    roll_number NVARCHAR(50) NULL,  -- Unique for students and follows a specific pattern
    created_at DATETIME DEFAULT GETDATE(),
    Name NVARCHAR(100) NOT NULL,
    LastName NVARCHAR(100) NOT NULL,
    Gender NVARCHAR(50) CHECK (Gender IN ('Male', 'Female', 'Other')),
    subject NVARCHAR(255) NULL,

    --Subject constraint
    CONSTRAINT CHK_Subject_Role CHECK ((role IN ('Teachers', 'Hod') AND subject IS NOT NULL) OR (role NOT IN ('Teachers', 'Hod') AND subject IS NULL));

    -- Role constraints
    CONSTRAINT CHK_Role CHECK (role IN ('Admin', 'Principal', 'Hod', 'Teachers', 'Students')),

    -- Students: batch_id, department_id, and roll_number are required
    CONSTRAINT CHK_Student_Fields CHECK (
        (role = 'Students' AND batch_id IS NOT NULL AND department_id IS NOT NULL AND roll_number IS NOT NULL)
        OR role != 'Students'
    ),

    -- Hod and Teachers: department_id required; batch_id and roll_number must be NULL
    CONSTRAINT CHK_Hod_Teachers_Fields CHECK (
        (role IN ('Hod', 'Teachers') AND department_id IS NOT NULL AND batch_id IS NULL AND roll_number IS NULL)
        OR role NOT IN ('Hod', 'Teachers')
    ),

    -- Admin and Principal: batch_id, department_id, and roll_number must be NULL
    CONSTRAINT CHK_Admin_Principal_Fields CHECK (
        (role IN ('Admin', 'Principal') AND batch_id IS NULL AND department_id IS NULL AND roll_number IS NULL)
        OR role NOT IN ('Admin', 'Principal')
    ),

    -- Roll number format check
    CONSTRAINT CHK_RollNumber_Format CHECK (roll_number LIKE '[0-9][0-9]-[0-9][0-9][0-9][0-9]' OR roll_number IS NULL)
);

-- Partial unique constraint: roll_number must be unique for students only
CREATE UNIQUE INDEX UQ_Student_RollNumber
ON Users (roll_number)
WHERE role = 'Students';

-- Departments Table: Stores details about each department in the college.
CREATE TABLE Departments (
    department_id INT IDENTITY(1,1) PRIMARY KEY,
    name NVARCHAR(255) NOT NULL,
    hod_id INT NULL,
    CONSTRAINT FK_HOD FOREIGN KEY (hod_id) REFERENCES Users(user_id)
);



INSERT INTO Departments (name)
VALUES ('Botany'),('Chemistry'),('Commerce'),('ComputerScience'),('Economics'),('Education'),('English'),('Geography'),('Health&PhysicalEducation'),('History'),('Islamiyat'),('Arabic'),('MassCommunication')
,('Mathematics'),('Persians'),('Physics'),('PoliticalScience'),('Psychology'),('Punjabi'),('SocialWork'),('Statistics'),('Urdu'),('Zoology');

-- Batches Table: Tracks student batches within departments (1-4).
CREATE TABLE Batches (
    batch_id INT IDENTITY(1,1) PRIMARY KEY,
    department_id INT NOT NULL,
    batch_year INT NOT NULL,
    students_count INT DEFAULT 0,
    CONSTRAINT FK_Department FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

-- User_Batches Table: Maps students to batches (many-to-many relationship).
CREATE TABLE User_Batches (
    user_id INT,
    batch_id INT,
    PRIMARY KEY (user_id, batch_id),
    CONSTRAINT FK_User FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Batch FOREIGN KEY (batch_id) REFERENCES Batches(batch_id)
);

-- Groups Table: Stores chat groups (department-specific, students, teachers, etc.).
CREATE TABLE Groups (
    group_id INT IDENTITY(1,1) PRIMARY KEY,
    group_name NVARCHAR(255) NOT NULL,
    description NVARCHAR(MAX),
    created_by INT NOT NULL,
    department_id INT NULL,
    is_private BIT DEFAULT 1, -- SQL Server uses BIT for boolean values
    created_at DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_CreatedBy FOREIGN KEY (created_by) REFERENCES Users(user_id),
    CONSTRAINT FK_DepartmentGroup FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

-- Group_Members Table: Maps users to chat groups with their roles (admin/member).
CREATE TABLE Group_Members (
    group_id INT,
    user_id INT,
    role NVARCHAR(50) NOT NULL,
    joined_at DATETIME DEFAULT GETDATE(),
    PRIMARY KEY (group_id, user_id),
    CONSTRAINT FK_Group FOREIGN KEY (group_id) REFERENCES Groups(group_id),
    CONSTRAINT FK_UserGroup FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT CHK_GroupRole CHECK (role IN ('group_admin', 'group_member'))
);

-- Messages Table: Stores messages sent within groups (text).
CREATE TABLE Messages (
    message_id INT IDENTITY(1,1) PRIMARY KEY,
    group_id INT NULL,
    sender_id INT NOT NULL,
    receiver_id INT NULL,
    content NVARCHAR(MAX) NOT NULL,
    timestamp DATETIME DEFAULT GETDATE(),
    FileUrl NVARCHAR(MAX) NULL,
    FileType NVARCHAR(MAX) NULL,
    FileName NVARCHAR(MAX) NULL,
    AudioUrl NVARCHAR(MAX) NULL;


CONSTRAINT CK_Message_GroupOrReceiver
CHECK (
    (Group_ID = 0 AND Receiver_ID <> 0) OR
    (Group_ID <> 0 AND Receiver_ID = 0)
),
    CONSTRAINT FK_MessageGroup FOREIGN KEY (group_id) REFERENCES Groups(group_id),
    CONSTRAINT FK_MessageSender FOREIGN KEY (sender_id) REFERENCES Users(user_id)
);


-- Files Table: Stores file uploads (PDF, PPT, etc.)
CREATE TABLE Files (
    file_id INT IDENTITY(1,1) PRIMARY KEY,
    group_id INT NOT NULL,
    sender_id INT NOT NULL,
    file_name NVARCHAR(255) NOT NULL,
    file_type NVARCHAR(50) NULL, -- PDF, PPT, etc.
    file_path NVARCHAR(255) NOT NULL, -- Path where the file is stored
    uploaded_at DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_FileGroup FOREIGN KEY (group_id) REFERENCES Groups(group_id),
    CONSTRAINT FK_FileSender FOREIGN KEY (sender_id) REFERENCES Users(user_id)
);

-- Announcements Table: Stores announcements visible to users (read-only).
CREATE TABLE Announcements (
    announcement_id INT IDENTITY(1,1) PRIMARY KEY,
    title NVARCHAR(255) NOT NULL,
    content NVARCHAR(MAX),
    department_id INT,
    created_at DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_AnnouncementDepartment FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

-- User_Profiles Table: Stores additional profile information for users (bio, social links).
CREATE TABLE User_Profiles (
    user_id INT PRIMARY KEY,
    bio NVARCHAR(MAX) NULL,
    social_links NVARCHAR(MAX) NULL,
    updated_at DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_UserProfile FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Chatbot_Queries Table: Tracks interactions with the college-related chatbot.
CREATE TABLE Chatbot_Queries (
    query_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NULL,
    query_text NVARCHAR(MAX),
    response NVARCHAR(MAX),
    timestamp DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_QueryUser FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


CREATE TABLE Friends (
    FriendRequestId INT PRIMARY KEY IDENTITY(1,1),
    SenderId NVARCHAR(450) NOT NULL,
    ReceiverId NVARCHAR(450) NOT NULL,
    Status NVARCHAR(20) NOT NULL CHECK (Status IN ('Waiting', 'Accepted', 'Rejected')),
    SentDate DATETIME NOT NULL DEFAULT GETDATE(),

    CONSTRAINT FK_Friends_Sender FOREIGN KEY (SenderId) REFERENCES Users(user_Id),
    CONSTRAINT FK_Friends_Receiver FOREIGN KEY (ReceiverId) REFERENCES Users(user_Id)
);
